def STATUS_COLOR_MAP = [
  'SUCCESS': '#78b037', 
  'FAILURE': '#d54c53', 
  'UNSTABLE': '#f5a623', 
  'ABORTED': '#949393']

def buildPropertyFile = 'build.props'

def createEnvironmentVariablesFile(){
  def commit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
  def now = new Date()
  def properties = [
    'BUILD_TIMESTAMP': now.format("yyyyMMdd.HHmmss"),
    'BUILD_DATE': now.format("yyyyMMdd"),
    'BUILD_TIME': now.format("HHmmss"),
    'GIT_COMMIT': commit,
    'GIT_COMMIT_SHORT': commit.take(8),
    'DOCKER_IMG_TAG': now.format("yyyyMMdd.HHmmss") + 'i-' + commit.take(8)
  ]

  writeYaml file:'build.props', data: properties
}

def loadEnvironmentVariables() {
  def props = readYaml file: 'build.props'
  keys= props.keySet()
  for(key in keys) {
      value = props["${key}"]
      env."${key}" = "${value}"
  }
}

pipeline {
    parameters { 
      string(name: 'PUBLISH_DOCKER_REGISTRY', defaultValue: 'amr-registry.caas.intel.com/xpum', description: 'the docker registry for publishing the xpum image') 
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
        timeout(time: 60, unit: 'MINUTES')
        skipStagesAfterUnstable()
        disableConcurrentBuilds()
        timestamps()
    }
    agent {
      kubernetes {
        yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    worker: xpum-builder
  namespace: xpum-cluster
spec:
  tolerations:
  - key: jenkins-job-only
    effect: NoSchedule
  - key: node-role.kubernetes.io/master
    effect: NoSchedule
  containers:
    - args:
      - "99d"
      command:
        - "sleep"
      image: "ccr-registry.caas.intel.com/xpum/xpum-builder-sles:lz-1.8.5-20221102"
      imagePullPolicy: "Always"
      name: "xpum-builder-sles"
      resources:
        limits: 
          memory: "6Gi"
          cpu: "2"
      securityContext:
        privileged: false
      tty: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: sign-secret
          mountPath: "/root"
          readOnly: true
        - mountPath: "/home/jenkins/jenkins-shared-pvc"
          name: "jenkins-shared-pvc"
          readOnly: false
      workingDir: "/home/jenkins/agent"
    - args:
        - "99d"
      command:
        - "sleep"
      image: "ccr-registry.caas.intel.com/xpum/xpum-builder-ubuntu-focal:lz-1.8.5-20221102"
      imagePullPolicy: "Always"
      name: "xpum-builder-ubuntu-focal"
      resources:
        limits: 
          memory: "6Gi"
          cpu: "2"
      securityContext:
        privileged: false
      tty: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: sign-secret
          mountPath: "/root"
          readOnly: true
        - mountPath: "/home/jenkins/jenkins-shared-pvc"
          name: "jenkins-shared-pvc"
          readOnly: false
      workingDir: "/home/jenkins/agent"
    - args:
        - "99d"
      command:
        - "sleep"
      image: "ccr-registry.caas.intel.com/xpum/xpum-builder-ubuntu-jammy:lz-1.8.5-20221102"
      imagePullPolicy: "Always"
      name: "xpum-builder-ubuntu-jammy"
      resources:
        limits: 
          memory: "6Gi"
          cpu: "2"
      securityContext:
        privileged: false
      tty: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: sign-secret
          mountPath: "/root"
          readOnly: true
        - mountPath: "/home/jenkins/jenkins-shared-pvc"
          name: "jenkins-shared-pvc"
          readOnly: false
      workingDir: "/home/jenkins/agent"
    - args:
        - "99d"
      command:
        - "sleep"
      image: "ccr-registry.caas.intel.com/xpum/xpum-builder-centos7:lz-1.8.5-20221102"
      imagePullPolicy: "Always"
      name: "xpum-builder-centos7"
      resources:
        limits: 
          memory: "6Gi"
          cpu: "2"
      tty: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: sign-secret
          mountPath: "/root"
          readOnly: true
        - mountPath: "/home/jenkins/jenkins-shared-pvc"
          name: "jenkins-shared-pvc"
          readOnly: false
      workingDir: "/home/jenkins/agent"
    - args:
        - "99d"
      command:
        - "sleep"
      image: "ccr-registry.caas.intel.com/xpum/xpum-builder-centos8:lz-1.8.5-20221102"
      imagePullPolicy: "Always"
      name: "xpum-builder-centos8"
      resources:
        limits: 
          memory: "6Gi"
          cpu: "2"
      tty: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: sign-secret
          mountPath: "/root"
          readOnly: true
        - mountPath: "/home/jenkins/jenkins-shared-pvc"
          name: "jenkins-shared-pvc"
          readOnly: false
      workingDir: "/home/jenkins/agent"
    - name: "kaniko-1"
      image: "gcr.io/kaniko-project/executor:debug"
      imagePullPolicy: Always
      command:
      - /busybox/cat
      tty: true
      resources:
        limits: 
          memory: "2Gi"
          cpu: "1"
      securityContext:
        privileged: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: docker-config
          mountPath: /kaniko/.docker
      workingDir: "/home/jenkins/agent"
    - name: "kaniko-2"
      image: "gcr.io/kaniko-project/executor:debug"
      imagePullPolicy: Always
      command:
      - /busybox/cat
      tty: true
      resources:
        limits: 
          memory: "2Gi"
          cpu: "1"
      securityContext:
        privileged: false
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
        - name: docker-config
          mountPath: /kaniko/.docker
      workingDir: "/home/jenkins/agent"
    - env:
        - name: "GIT_LFS_SKIP_SMUDGE"
          value: "1"
        - name: "GIT_TRACE"
          value: "0"
        - name: "GIT_CURL_VERBOSE"
          value: "0"
        - name: "JENKINS_AGENT_WORKDIR"
          value: "/home/jenkins/agent"
        - name: "HTTP_PROXY"
          value: "http://proxy-dmz.intel.com:912"
        - name: "HTTPS_PROXY"
          value: "http://proxy-dmz.intel.com:912"
        - name: "NO_PROXY"
          value: "*.intel.com"
        - name: "http_proxy"
          value: "http://proxy-dmz.intel.com:912"
        - name: "https_proxy"
          value: "http://proxy-dmz.intel.com:912"
        - name: "no_proxy"
          value: "*.intel.com"
      image: "jenkins/inbound-agent:4.11-1"
      name: "jnlp"
      resources:
        limits: 
          memory: "2Gi"
          cpu: "2"
      volumeMounts:
        - mountPath: "/home/jenkins/agent"
          name: "workspace-volume"
          readOnly: false
  hostNetwork: false
  nodeSelector:
    kubernetes.io/os: "linux"
  restartPolicy: "Never"
  volumes:
    - emptyDir:
        medium: ""
      name: workspace-volume
    - name: jenkins-shared-pvc
      persistentVolumeClaim:
        claimName: xpum-cluster-jenkins-share
    - name: sign-secret
      secret:
        secretName: sign-secret
        items:
          - key: password
            path: password.sys_dcm
'''
        defaultContainer 'shell'
      }
    }
    environment {
      ARCHIVE_FILES = 'build-deb-*/*.deb,build-centos*/*.rpm,build-sles/*.rpm,XPUM_PGP_KEY.pem'
      PUBLISH_DOCKER_REGISTRY = "${params.PUBLISH_DOCKER_REGISTRY}"
    }
    stages {
      stage('Prepare') {
          steps {
            container(name: 'jnlp', shell: 'bash') {
              script {
                createEnvironmentVariablesFile()
                loadEnvironmentVariables()
              }
            }
          }
      } 
      stage('Build') {
        parallel {
          stage('build focal deb') {
            steps {
              container(name: 'xpum-builder-ubuntu-focal') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''env && MAIN_WORKSPACE=$PWD && \
                mkdir ../ws_ubuntu_focal && \
                cp -rp . ../ws_ubuntu_focal && \
                cd ../ws_ubuntu_focal && \
                export CCACHE_DIR=/home/jenkins/jenkins-shared-pvc/.ccache && \
                export CCACHE_BASEDIR=$PWD && \
                mkdir $MAIN_WORKSPACE/build-deb-focal && \
                ./build.sh -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpum*.deb $MAIN_WORKSPACE/build-deb-focal && \
                rm -fr build && \
                ./build.sh -DDAEMONLESS=ON -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpu*.deb $MAIN_WORKSPACE/build-deb-focal
                '''
              }
            }
          }

          stage('build jammy deb') {
            steps {
              container(name: 'xpum-builder-ubuntu-jammy') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''env && MAIN_WORKSPACE=$PWD && \
                mkdir ../ws_ubuntu_jammy && \
                cp -rp . ../ws_ubuntu_jammy && \
                cd ../ws_ubuntu_jammy && \
                export CCACHE_DIR=/home/jenkins/jenkins-shared-pvc/.ccache && \
                export CCACHE_BASEDIR=$PWD && \
                mkdir $MAIN_WORKSPACE/build-deb-jammy && \
                ./build.sh -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpum*.deb $MAIN_WORKSPACE/build-deb-jammy && \
                rm -fr build && \
                ./build.sh -DDAEMONLESS=ON -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpu*.deb $MAIN_WORKSPACE/build-deb-jammy
                '''
              }
            }
          }

          stage('build redhat-7 rpm') {
            steps {
              container(name: 'xpum-builder-centos7', shell: 'bash') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''env && MAIN_WORKSPACE=$PWD && \
                mkdir ../ws_centos7 && \
                cp -rp . ../ws_centos7 && \
                cd ../ws_centos7 && \
                export CCACHE_DIR=/home/jenkins/jenkins-shared-pvc/.ccache && \
                export CCACHE_BASEDIR=$PWD && \
                ./build.sh -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                mkdir $MAIN_WORKSPACE/build-centos7 && \
                cp ./build/xpum*.rpm $MAIN_WORKSPACE/build-centos7'''
              }
            }
          }

          stage('build redhat-8 rpm') {
            steps {
              container(name: 'xpum-builder-centos8', shell: 'bash') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''env && MAIN_WORKSPACE=$PWD && \
                mkdir ../ws_centos8 && \
                cp -rp . ../ws_centos8 && \
                cd ../ws_centos8 && \
                export CCACHE_DIR=/home/jenkins/jenkins-shared-pvc/.ccache && \
                export CCACHE_BASEDIR=$PWD && \
                mkdir $MAIN_WORKSPACE/build-centos8 && \
                ./build.sh -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpum*.rpm $MAIN_WORKSPACE/build-centos8 && \
                rm -fr build && \
                ./build.sh -DDAEMONLESS=ON -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpu*.rpm $MAIN_WORKSPACE/build-centos8
                '''
              }
            }
          }

          stage('build suse rpm') {
            steps {
              container(name: 'xpum-builder-sles', shell: 'bash') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''env && MAIN_WORKSPACE=$PWD && \
                mkdir ../ws_sles && \
                cp -rp . ../ws_sles && \
                cd ../ws_sles && \
                export CCACHE_DIR=/home/jenkins/jenkins-shared-pvc/.ccache && \
                export CCACHE_BASEDIR=$PWD && \
                ./build.sh -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                mkdir $MAIN_WORKSPACE/build-sles && \
                cp ./build/xpum*.rpm $MAIN_WORKSPACE/build-sles && \
                rm -fr build && \
                ./build.sh -DDAEMONLESS=ON -DBUILD_DOC=ON -DBUILD_DATE=$BUILD_DATE -DBUILD_TIME=$BUILD_TIME -DGIT_COMMIT=$GIT_COMMIT_SHORT && \
                cp ./build/xpu*.rpm $MAIN_WORKSPACE/build-sles
                '''
              }
            }
          }
        }
      }

      stage('Publish') {
        parallel {
          stage('Create ATS Docker Image') {
            steps {
              container(name: 'kaniko-1') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''pwd && env
                  cp -rp deployment/docker deployment/docker_ats
                  cp rest/requirements.txt deployment/docker_ats
                  cp third-party-programs.txt deployment/docker_ats
                  mkdir deployment/docker_ats/build-deb && cp build-deb-focal/xpum*.deb deployment/docker_ats/build-deb
                  export http_proxy=http://proxy-dmz.intel.com:911
                  export HTTP_PROXY=http://proxy-dmz.intel.com:911
                  export https_proxy=http://proxy-dmz.intel.com:912
                  export HTTPS_PROXY=http://proxy-dmz.intel.com:912
                  export no_proxy=.intel.com
                  export NO_PROXY=.intel.com
                  /kaniko/executor \
                    --cache=true \
                    --build-arg http_proxy=http://proxy-dmz.intel.com:911 \
                    --build-arg HTTP_PROXY=http://proxy-dmz.intel.com:911 \
                    --build-arg https_proxy=http://proxy-dmz.intel.com:912 \
                    --build-arg HTTPS_PROXY=http://proxy-dmz.intel.com:912 \
                    --build-arg no_proxy=.intel.com \
                    --build-arg NO_PROXY=.intel.com \
                    --dockerfile `pwd`/deployment/docker_ats/Dockerfile.ubuntu.20.04 \
                    --context `pwd`/deployment/docker_ats \
                    --skip-tls-verify \
                    --destination=$PUBLISH_DOCKER_REGISTRY/intel-xpumanager-ats:$DOCKER_IMG_TAG
                '''
              }
            }
          }

          stage('Create PVC Docker Image') {
            steps {
              container(name: 'kaniko-2') {
                script {
                  loadEnvironmentVariables()
                }
                sh '''pwd && env
                  cp -rp deployment/docker deployment/docker_pvc
                  cp rest/requirements.txt deployment/docker_pvc
                  cp third-party-programs.txt deployment/docker_pvc
                  mkdir deployment/docker_pvc/build-deb && cp build-deb-jammy/xpum*.deb deployment/docker_pvc/build-deb
                  export http_proxy=http://proxy-dmz.intel.com:911
                  export HTTP_PROXY=http://proxy-dmz.intel.com:911
                  export https_proxy=http://proxy-dmz.intel.com:912
                  export HTTPS_PROXY=http://proxy-dmz.intel.com:912
                  export no_proxy=.intel.com
                  export NO_PROXY=.intel.com
                  /kaniko/executor \
                    --cache=true \
                    --build-arg http_proxy=http://proxy-dmz.intel.com:911 \
                    --build-arg HTTP_PROXY=http://proxy-dmz.intel.com:911 \
                    --build-arg https_proxy=http://proxy-dmz.intel.com:912 \
                    --build-arg HTTPS_PROXY=http://proxy-dmz.intel.com:912 \
                    --build-arg no_proxy=.intel.com \
                    --build-arg NO_PROXY=.intel.com \
                    --dockerfile `pwd`/deployment/docker_pvc/Dockerfile.ubuntu.22.04.pvc \
                    --context `pwd`/deployment/docker_pvc \
                    --skip-tls-verify \
                    --destination=$PUBLISH_DOCKER_REGISTRY/intel-xpumanager-pvc:$DOCKER_IMG_TAG
                '''
              }
            }
          }

          stage('Archive') {
            steps {
              archiveArtifacts(artifacts: "${env.ARCHIVE_FILES}", fingerprint: true, onlyIfSuccessful: true)
            }
          }

        }
      }
    }
    post {
      success {
        script {
          if (env.BRANCH_NAME == 'master') {
            cifsPublisher alwaysPublishFromMaster: false, continueOnError: false, failOnError: false, publishers: [[
              configName: 'huiqi-share', transfers: [[
              cleanRemote: false,
              excludes: '',
              flatten: true,
              makeEmptyDirs: false,
              noDefaultExcludes: false,
              patternSeparator: '[, ]+',
              remoteDirectory: "$JOB_NAME/${env.BUILD_TIMESTAMP}.${env.GIT_COMMIT_SHORT}",
              remoteDirectorySDF: false,
              removePrefix: '',
              sourceFiles: "${env.ARCHIVE_FILES}"]],
              usePromotionTimestamp: false,
              useWorkspaceInPromotion: false,
              verbose: true
              ]]
          }
        }
      }
    }
}